'' *****************************************************************************
''  Module DESCRIPTION:
''  	MQTT 3.1.1 Implementation for Precise Automation GPL platform
'' 
'' *****************************************************************************
''  Copyright (c) 2020 John W. Kohler <jkohler@jkohler.org>
''  All rights reserved.
'' 
''  Redistribution and use in source and binary forms, with or without
''  modification, are permitted provided that the following conditions
''  are met:
''  1. Redistributions of source code must retain the above copyright
''     notice, this list of conditions And the following disclaimer.
''  2. Redistributions in binary form must reproduce the above copyright
''     notice, this list of conditions and the following disclaimer in the
''     documentation and/or other materials provided with the distribution.
''  3. All advertising materials mentioning features or use of this software
''     must display the following acknowledgement:
''       This product includes software developed by John Kohler.
''  4. The name of John Kohler may not be used to endorse or promote products
''     derived from this software without specific prior written permission.
'' 
''  THIS SOFTWARE Is PROVIDED BY THE AUTHOR ``As Is'' AND ANY EXPRESS OR
''  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
''  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
''  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
''  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
''  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
''  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
''  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
''  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
''  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'' *****************************************************************************



Class MQTTLogger
		
	Public Const MQTT_LOG_LEVEL_NONE 					As Integer = 0
	Public Const MQTT_LOG_LEVEL_TRACE 					As Integer = 1
	Public Const MQTT_LOG_LEVEL_DEBUG 					As Integer = 2
	Public Const MQTT_LOG_LEVEL_INFO 					As Integer = 3
	Public Const MQTT_LOG_LEVEL_NOTICE 					As Integer = 4
	Public Const MQTT_LOG_LEVEL_WARN 					As Integer = 5
	Public Const MQTT_LOG_LEVEL_ERROR 					As Integer = 6
	Public Const MQTT_LOG_LEVEL_PANIC 					As Integer = 7
	Public Const MQTT_LOG_LEVEL_ALL 					As Integer = MQTT_LOG_LEVEL_TRACE
	Public Const MQTT_LOG_LEVEL_DFLT 					As Integer = MQTT_LOG_LEVEL_INFO

	Private _log_level As Integer
	
	Public Property LogLevel As Integer
		Get
			Return _log_level
		End Get
		Set ( value As Integer )
			_log_level = value
		End Set
	End Property 

	Public Sub New()
		Initialize()
	End Sub
	
	Private Sub Initialize()
		LogLevel = MQTT_LOG_LEVEL_DFLT
	End Sub
		
	Private Sub Log( lvl As String, msg As String )
		Controller.SystemMessage( Format( Controller.Timer, "0.0000" ) & " -- mqtt  " & lvl & " " & msg )
	End Sub	
	
	Public Sub Trace( msg As String )
		If MQTT_LOG_LEVEL_TRACE >= _log_level Then Log( "TRACE", msg )
	End Sub	
	
	Public Sub Debug( msg As String )
		If MQTT_LOG_LEVEL_DEBUG >= _log_level Then Log( "DEBUG", msg )
	End Sub	
	
	Public Sub Info( msg As String )
		If MQTT_LOG_LEVEL_INFO  >= _log_level Then Log( "INFO", msg )
	End Sub	
	
	Public Sub Notice( msg As String )
		If MQTT_LOG_LEVEL_NOTICE  >= _log_level Then Log( "NOTICE", msg )
	End Sub	
	
	Public Sub Warn( msg As String )
		If MQTT_LOG_LEVEL_WARN  >= _log_level Then Log( "WARN", msg )
	End Sub	
	
	Public Sub Err( msg As String )
		If MQTT_LOG_LEVEL_ERROR  >= _log_level Then Log( "ERROR", msg )
	End Sub	
	
	Public Sub Panic( msg As String )
		If MQTT_LOG_LEVEL_PANIC  >= _log_level Then Log( "PANIC", msg )
	End Sub	
	
	Public Sub Except( exc As Exception, msg As String )
	 	Log( "EXCEPTION", msg & "::" & CStr( exc.ErrorCode ) & "  " & exc.Message )
	End Sub
	
End Class
